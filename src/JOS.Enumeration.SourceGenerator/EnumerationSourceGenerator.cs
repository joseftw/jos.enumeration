using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace JOS.Enumeration.SourceGenerator;

[Generator(LanguageNames.CSharp)]
public class EnumerationSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var recordDeclarations = EnumerationHelpers.GetEnumerationRecordDeclarations(context);
        var incrementalValueProvider = context.CompilationProvider.Combine(recordDeclarations);
        context.RegisterSourceOutput(
            incrementalValueProvider,
            static (spc, source) => GenerateImplementations(source.Left, source.Right, spc));
        context.RegisterSourceOutput(
            incrementalValueProvider,
            static (spc, source) => GenerateEnumerationsClass(source.Left, source.Right, spc));
    }

    private static void GenerateImplementations(
        Compilation compilation,
        ImmutableArray<RecordDeclarationSyntax> enumerations,
        SourceProductionContext context)
    {
        if(enumerations.IsDefaultOrEmpty)
        {
            return;
        }

        foreach(var enumeration in enumerations)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            var symbol = compilation.GetSemanticModel(enumeration.SyntaxTree).GetDeclaredSymbol(enumeration)!;
            var @namespace = symbol.ContainingNamespace;
            var fieldDeclarationSyntaxes =
                enumeration.Members.Where(x => x is FieldDeclarationSyntax).Cast<FieldDeclarationSyntax>().ToList();
            var items = SourceGenerationHelpers.ExtractEnumerationItems(fieldDeclarationSyntaxes);
            var source = $$"""
            {{SourceGenerationHelpers.AutoGenerated}}
            {{SourceGenerationHelpers.Nullable}}
            using System;
            using System.Collections;
            using System.Collections.Generic;
            using JOS.Enumeration;

            namespace {{@namespace}};

            [System.Diagnostics.DebuggerDisplay(nameof(IEnumeration<{{symbol}}>.DisplayName))]
            {{enumeration.Modifiers}} record {{symbol.MetadataName}} : IComparable<{{symbol}}>
            {
                private static readonly IReadOnlyCollection<{{symbol}}> AllItems;

                static {{symbol.MetadataName}}()
                {
                    AllItems = new HashSet<{{symbol}}>({{items.Count}})
                    {
                        {{AllItemsList(items)}}
                    };
                }

                private {{symbol.MetadataName}}(int value, string displayName)
                {
                    Value = value;
                    DisplayName = displayName ?? throw new ArgumentNullException(nameof(displayName));
                }

                public int Value {get; }
                public string DisplayName {get; }

                public static IReadOnlyCollection<{{symbol}}> GetAll()
                {
                    return AllItems;
                }

                public static IEnumerable<{{symbol}}> GetEnumerable()
                {
                    {{GetEnumeratorBody(items)}}
                }

                public static {{symbol}} FromValue(int value)
                {
                    {{FromValueMethodBody(items, symbol)}}
                }

                public static {{symbol}} FromDisplayName(string displayName)
                {
                    {{FromDisplayNameBody(items, symbol)}}
                }

                public int CompareTo({{symbol}}? other) => Value.CompareTo(other!.Value);
                public static implicit operator int({{symbol}} item) => item.Value;
                public static implicit operator {{symbol}}(int value) => FromValue(value);
            }
            """;

            context.AddSource($"{symbol.MetadataName}.Generated.Implementation.cs", source.FormatSource());
        }
    }

    private static void GenerateEnumerationsClass(
        Compilation compilation,
        ImmutableArray<RecordDeclarationSyntax> enumerations,
        SourceProductionContext context)
    {
        if(enumerations.IsDefaultOrEmpty)
        {
            return;
        }

        context.CancellationToken.ThrowIfCancellationRequested();
        var @namespace = compilation.Assembly.Identity.Name;
        var source = $$"""
            {{SourceGenerationHelpers.AutoGenerated}}
            {{SourceGenerationHelpers.Nullable}}
            using System;
            using JOS.Enumeration;

            namespace {{@namespace}};

            public static class Enumerations
            {
                {{GenerateNestedClasses(compilation, enumerations)}}
            }
            """;

        context.AddSource("Enumerations.Generated.cs", source.FormatSource());
    }

    private static string GenerateNestedClasses(
        Compilation compilation, ImmutableArray<RecordDeclarationSyntax> enumerations)
    {
        var stringBuilder = new StringBuilder();
        foreach(var enumeration in enumerations)
        {
            var symbol =
                compilation.GetSemanticModel(enumeration.SyntaxTree).GetDeclaredSymbol(enumeration)!;
            var name = symbol.Name;
            stringBuilder.AppendLine($"public static class {name}");
            stringBuilder.AppendLine("{");
            var fieldDeclarationSyntaxes =
                enumeration.Members.Where(x => x is FieldDeclarationSyntax).Cast<FieldDeclarationSyntax>().ToList();
            var items = SourceGenerationHelpers.ExtractEnumerationItems(fieldDeclarationSyntaxes);
            foreach(var item in items)
            {
                stringBuilder.AppendLine($"public static class {item.FieldName}");
                stringBuilder.AppendLine("{");
                stringBuilder.AppendLine($"public const int Value = {item.Value};");
                stringBuilder.AppendLine($"public const string DisplayName = \"{item.DisplayName}\";");
                stringBuilder.AppendLine("}");
            }
            stringBuilder.AppendLine("}");
        }

        return stringBuilder.ToString();
    }

    private static string GetEnumeratorBody(IEnumerable<EnumerationItem> items)
    {
        var stringBuilder = new StringBuilder();
        foreach(var item in items)
        {
            stringBuilder.AppendLine($"yield return {item.FieldName};");
        }

        return stringBuilder.ToString();
    }

    private static string AllItemsList(IEnumerable<EnumerationItem> items)
    {
        var stringBuilder = new StringBuilder();
        foreach(var item in items)
        {
            stringBuilder.AppendLine($"{item.FieldName},");
        }
        return stringBuilder.ToString();
    }

    private static string FromValueMethodBody(IEnumerable<EnumerationItem> items, ISymbol enumerationSymbol)
    {
        var stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("return value switch");
        stringBuilder.AppendLine("{");
        foreach(var field in items)
        {
            stringBuilder.AppendLine($"{field.Value} => {field.FieldName},");
        }

        stringBuilder.AppendLine(
            $"_ => throw new InvalidOperationException($\"'{{value}}' is not a valid value in '{enumerationSymbol}'\")");
        stringBuilder.Append("};");
        return stringBuilder.ToString();
    }

    private static string FromDisplayNameBody(IEnumerable<EnumerationItem> items, ISymbol enumerationSymbol)
    {
        var stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("return displayName switch");
        stringBuilder.AppendLine("{");
        foreach(var field in items)
        {
            stringBuilder.AppendLine($"\"{field.DisplayName}\" => {field.FieldName},");
        }

        stringBuilder.AppendLine(
            $"_ => throw new InvalidOperationException($\"'{{displayName}}' is not a valid display name in '{enumerationSymbol}'\")");
        stringBuilder.Append("};");
        return stringBuilder.ToString();
    }
}
