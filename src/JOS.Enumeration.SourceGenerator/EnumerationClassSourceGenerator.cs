using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace JOS.Enumeration.SourceGenerator;

[Generator]
public class EnumerationClassSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var recordDeclarations = EnumerationHelpers.GetEnumerationRecordDeclarations(context);
        var incrementalValueProvider = context.CompilationProvider.Combine(recordDeclarations);
        context.RegisterSourceOutput(
            incrementalValueProvider, static (spc, source) => Execute(source.Left, source.Right, spc));
    }

    private static void Execute(
        Compilation compilation,
        ImmutableArray<RecordDeclarationSyntax> enumerations,
        SourceProductionContext context)
    {
        if(enumerations.IsDefaultOrEmpty)
        {
            return;
        }

        context.CancellationToken.ThrowIfCancellationRequested();
        var @namespace = compilation.Assembly.Identity.Name;
        var source = $$"""
            {{SourceGenerationHelpers.AutoGenerated}}
            {{SourceGenerationHelpers.Nullable}}
            using System;
            using JOS.Enumeration;

            namespace {{@namespace}};

            public static class Enumerations
            {
                {{GenerateNestedClasses(compilation, enumerations)}}
            }
            """;

        context.AddSource("Enumerations.Generated.Implementation.cs", source.FormatSource());
    }

    private static string GenerateNestedClasses(
        Compilation compilation, ImmutableArray<RecordDeclarationSyntax> enumerations)
    {
        var stringBuilder = new StringBuilder();
        foreach(var enumeration in enumerations)
        {
            var symbol =
                compilation.GetSemanticModel(enumeration.SyntaxTree).GetDeclaredSymbol(enumeration)!;
            var name = symbol.Name;
            stringBuilder.AppendLine($"public static class {name}");
            stringBuilder.AppendLine("{");
            var fieldDeclarationSyntaxes =
                enumeration.Members.Where(x => x is FieldDeclarationSyntax).Cast<FieldDeclarationSyntax>().ToList();
            var items = SourceGenerationHelpers.ExtractEnumerationItems(fieldDeclarationSyntaxes);
            foreach(var item in items)
            {
                stringBuilder.AppendLine($"public static class {item.FieldName}");
                stringBuilder.AppendLine("{");
                stringBuilder.AppendLine($"public const int Value = {item.Value};");
                stringBuilder.AppendLine($"public const string DisplayName = \"{item.DisplayName}\";");
                stringBuilder.AppendLine("}");
            }
            stringBuilder.AppendLine("}");
        }

        return stringBuilder.ToString();
    }
}
