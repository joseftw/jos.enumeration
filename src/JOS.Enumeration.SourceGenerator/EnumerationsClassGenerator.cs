using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Text;

namespace JOS.Enumeration.SourceGenerator;

internal static class EnumerationsClassGenerator
{
    internal static void Generate(
        string @namespace,
        IReadOnlyCollection<EnumerationImplementation> enumerations,
        SourceProductionContext context)
    {
        context.CancellationToken.ThrowIfCancellationRequested();
        var source = $$"""
            {{SourceGenerationHelpers.AutoGenerated}}
            {{SourceGenerationHelpers.Nullable}}
            using System;
            using JOS.Enumeration;

            namespace {{@namespace}};

            {{SourceGenerationHelpers.CodeGenerated(ThisAssembly.AssemblyInformationalVersion)}}
            {{SourceGenerationHelpers.ExcludeFromCodeCoverage}}
            public static class Enumerations
            {
                {{GenerateNestedClasses(enumerations)}}
            }
            """;

        context.AddSource("Enumerations.generated.cs", source.FormatSource());
    }

    private static string GenerateNestedClasses(IReadOnlyCollection<EnumerationImplementation> enumerations)
    {
        var stringBuilder = new StringBuilder();
        foreach(var enumeration in enumerations)
        {
            stringBuilder.AppendLine($"public static class {enumeration.Symbol.MetadataName}");
            stringBuilder.AppendLine("{");
            foreach(var item in enumeration.Items)
            {
                var value = FormatValue(enumeration.Value, item.Value);
                if(enumeration.Value.OriginalDefinition.Equals("decimal", StringComparison.OrdinalIgnoreCase))
                {
                    value = $"{value}m";
                }
                stringBuilder.AppendLine($"public static class {item.FieldName}");
                stringBuilder.AppendLine("{");
                stringBuilder.AppendLine($"public const {enumeration.Value.OriginalDefinition} Value = {value};");
                stringBuilder.AppendLine($"public const string Description = \"{item.Description}\";");
                stringBuilder.AppendLine("}");
            }
            stringBuilder.AppendLine("}");
        }

        return stringBuilder.ToString();
    }

    private static string FormatValue(EnumerationValue enumerationValue, object value)
    {
        return enumerationValue.OriginalDefinition switch
        {
            "bool" => value.ToString()!.ToLower(),
            "string" => $"\"{value}\"",
            _ => value.ToString()!
        };
    }
}
