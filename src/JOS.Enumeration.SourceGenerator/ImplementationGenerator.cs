using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace JOS.Enumeration.SourceGenerator;

internal static class ImplementationGenerator
{
    internal static void Generate(
        Compilation compilation,
        ImmutableArray<RecordDeclarationSyntax> enumerations,
        SourceProductionContext context)
    {
        if(enumerations.IsDefaultOrEmpty)
        {
            return;
        }

        foreach(var enumeration in enumerations)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            var symbol = compilation.GetSemanticModel(enumeration.SyntaxTree).GetDeclaredSymbol(enumeration)!;
            var @namespace = symbol.ContainingNamespace;
            var typeSymbol = (ITypeSymbol)symbol;
            var enumerationInterface =
                typeSymbol.AllInterfaces.Single(x => x.Name == "IEnumeration" && x.TypeArguments.Length == 2);
            var valueType = enumerationInterface.TypeArguments.First();
            var fieldDeclarationSyntaxes =
                enumeration.Members.Where(x => x is FieldDeclarationSyntax).Cast<FieldDeclarationSyntax>().ToList();
            var items = SourceGenerationHelpers.ExtractEnumerationItems(fieldDeclarationSyntaxes);
            var source = $$"""
            {{SourceGenerationHelpers.AutoGenerated}}
            {{SourceGenerationHelpers.Nullable}}
            using System;
            using System.Collections;
            using System.Collections.Generic;
            #if NET8_0_OR_GREATER
            using System.Collections.Frozen;
            #endif
            using JOS.Enumeration;

            namespace {{@namespace}};

            [System.Diagnostics.DebuggerDisplay("{DisplayName}")]
            {{enumeration.Modifiers}} record {{symbol.MetadataName}} : IComparable<{{symbol}}>
            {
                private static readonly IReadOnlySet<{{symbol}}> AllItems;

                static {{symbol.MetadataName}}()
                {
                    #if NET8_0_OR_GREATER
                    AllItems = new HashSet<{{symbol}}>({{items.Count}})
                    {
                        {{AllItemsSet(items)}}
                    }.ToFrozenSet(optimizeForReading: true);
                    #else
                    AllItems = new HashSet<{{symbol}}>({{items.Count}})
                    {
                        {{AllItemsSet(items)}}
                    };
                    #endif
                }

                private {{symbol.MetadataName}}({{valueType}} value, string displayName)
                {
                    Value = value;
                    DisplayName = displayName ?? throw new ArgumentNullException(nameof(displayName));
                }

                public {{valueType}} Value { get; }
                public string DisplayName { get; }

                public static IReadOnlySet<{{symbol}}> GetAll()
                {
                    return AllItems;
                }

                public static IEnumerable<{{symbol}}> GetEnumerable()
                {
                    {{GetEnumeratorBody(items)}}
                }

                public static {{symbol}} FromValue({{valueType}} value)
                {
                    {{FromValueMethodBody(valueType.OriginalDefinition, items, symbol)}}
                }

                public static {{symbol}} FromDisplayName(string displayName)
                {
                    {{FromDisplayNameBody(items, symbol)}}
                }

                public static {{symbol}} FromDisplayName(ReadOnlySpan<char> displayName)
                {
                    {{FromDisplayNameBody(items, symbol)}}
                }

                public int CompareTo({{symbol}}? other) => Value.CompareTo(other!.Value);
                public static implicit operator {{valueType.OriginalDefinition}}({{symbol}} item) => item.Value;
                public static implicit operator {{symbol}}({{valueType.OriginalDefinition}} value) => FromValue(value);
            }
            """;

            context.AddSource($"{symbol.MetadataName}.Generated.Implementation.cs", source.FormatSource());
        }
    }

    private static string GetEnumeratorBody(IEnumerable<EnumerationItem> items)
    {
        var stringBuilder = new StringBuilder();
        foreach(var item in items)
        {
            stringBuilder.AppendLine($"yield return {item.FieldName};");
        }

        return stringBuilder.ToString();
    }

    private static string AllItemsSet(IEnumerable<EnumerationItem> items)
    {
        var stringBuilder = new StringBuilder();
        foreach(var item in items)
        {
            stringBuilder.AppendLine($"{item.FieldName},");
        }
        return stringBuilder.ToString();
    }

    private static string FromValueMethodBody(
        ITypeSymbol typeSymbol, IEnumerable<EnumerationItem> items, ISymbol enumerationSymbol)
    {
        var wrapInQuotes = ShouldWrapInQuotes(typeSymbol.Name);
        var stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("return value switch");
        stringBuilder.AppendLine("{");
        foreach(var field in items)
        {
            var value = field.Value;
            if(wrapInQuotes)
            {
                value = WrapValueInQuotes(value);
            }

            if(value is bool)
            {
                value = value.ToString().ToLower();
            }

            stringBuilder.AppendLine($"{value} => {field.FieldName},");
        }

        if(ShouldAppendDefaultThrowCase(typeSymbol))
        {
            stringBuilder.AppendLine(
                $"_ => throw new InvalidOperationException($\"'{{value}}' is not a valid value in '{enumerationSymbol}'\")");
        }

        stringBuilder.Append("};");
        return stringBuilder.ToString();

        static bool ShouldAppendDefaultThrowCase(ITypeSymbol typeSymbol)
        {
            return typeSymbol.OriginalDefinition.ToString() switch
            {
                "bool" => false,
                _ => true
            };
        }
    }

    private static string FromDisplayNameBody(IEnumerable<EnumerationItem> items, ISymbol enumerationSymbol)
    {
        var stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("return displayName switch");
        stringBuilder.AppendLine("{");
        foreach(var field in items)
        {
            stringBuilder.AppendLine($"\"{field.DisplayName}\" => {field.FieldName},");
        }

        stringBuilder.AppendLine(
            $"_ => throw new InvalidOperationException($\"'{{displayName}}' is not a valid display name in '{enumerationSymbol}'\")");
        stringBuilder.Append("};");
        return stringBuilder.ToString();
    }

    private static bool ShouldWrapInQuotes(string valueType)
    {
        return valueType.ToLowerInvariant() switch
        {
            "string" => true,
            _ => false
        };
    }

    private static string WrapValueInQuotes(object value)
    {
        return $"\"{value}\"";
    }
}
