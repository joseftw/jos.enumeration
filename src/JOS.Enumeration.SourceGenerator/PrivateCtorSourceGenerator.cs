using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace JOS.Enumeration.SourceGenerator;

[Generator]
internal class PrivateCtorSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var recordDeclarations = EnumerationHelpers.GetRecordDeclarations(context);
        var incrementalValueProvider = context.CompilationProvider.Combine(recordDeclarations);
        context.RegisterSourceOutput(
            incrementalValueProvider, static (spc, source) => Execute(source.Left, source.Right, spc));
    }

    private static void Execute(
        Compilation compilation, ImmutableArray<RecordDeclarationSyntax> enumerations, SourceProductionContext context)
    {
        if (enumerations.IsDefaultOrEmpty)
        {
            return;
        }

        foreach (var enumeration in enumerations)
        {
            // TODO only generate if no other ctor has been specified
            context.CancellationToken.ThrowIfCancellationRequested();
            var symbol = compilation.GetSemanticModel(enumeration.SyntaxTree).GetDeclaredSymbol(enumeration)!;
            var @namespace = symbol.ContainingNamespace;
            var modifier = enumeration.Modifiers.ToString();
            var source = $$"""
            {{SourceGenerationHelpers.AutoGenerated}}

            using JOS.Enumeration;

            namespace {{@namespace}};

            {{modifier}} record {{symbol.MetadataName}} : Enumeration<{{symbol.MetadataName}}>
            {
                private {{symbol.MetadataName}}(int value, string displayName) : base(value, displayName)
                {
                }
            }
            """;

            context.AddSource($"{symbol.MetadataName}.Generated.Constructor.cs", source);
        }
    }
}
